generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text       String   @db.VarChar(255)
  video_id   String   @db.Uuid
  viewer_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  video      video    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [viewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  video       video[]
}

model reaction {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       String   @db.VarChar(255)
  video_id   String   @db.Uuid
  viewer_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  video      video    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [viewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  comment      comment[]
  organization organization[]
  reaction     reaction[]
  video        video[]
}

model video {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String       @db.VarChar(255)
  description        String?      @db.VarChar(255)
  tags               String?      @db.VarChar(255)
  url                String       @db.VarChar(255)
  organization_id    String       @db.Uuid
  content_creator_id String       @db.Uuid
  created_at         DateTime     @default(now()) @db.Timestamp(6)
  updated_at         DateTime     @default(now()) @db.Timestamp(6)
  comment            comment[]
  reaction           reaction[]
  user               user         @relation(fields: [content_creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization       organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
